#!/opt/local/bin/perl
use Mojolicious::Lite;
use Mojolicious::Validator;
use Mojolicious::Validator::Validation;
use DateTime;
use Data::Dumper;
use DBI;

my $config  = plugin 'Config';
my $appname = "Neutrino";
my $version = "0.1";

get "/" => sub {
    my $self = shift;
    $self->render_static("index.html");
};

get "/help-about.html" => {appname => $appname, version => $version} => sub {
    my $self = shift;
} => 'about';

##########
## API ###
##########

under '/api';

get "/date" => sub {
    my $self = shift;
    my $date;
    $self->render(json => { result => 1, payload => $date });
};

get "/sensors" => sub {
    my $self = shift;
    my $dbh = _mysql_dbh($self, $config) or return;
    my $sth = $dbh->prepare("SELECT * from sensor");
    $sth->execute();
    my $data = $sth->fetchall_arrayref({});
    $sth->finish();
    if (exists $data->[0]) {
        $self->render(status => 200, json => { result => 1, payload => $data});
    } else {
        $self->render(status => 500, json => { result => 0, payload => 'server error'});
    }
};

get "/sensors/:id/data" => sub {
    my $self       = shift;
    my $id         = $self->param('id');
    my $value      = $self->param('value');
    my $hours      = $self->param('hours');
    my $validator  = Mojolicious::Validator->new;
    my $validation = Mojolicious::Validator::Validation->new(validator => $validator);

    $validation->input({'id' => $id, 'value' => $value, 'hours' => $hours});
    $validation->required('id')->like(qr/^\d+$/);
    $validation->required('value')->in(qw(voltage temperature humidity pressure all));
    $validation->required('hours')->size(1,720);
    if(! $validation->is_valid) {
        $self->render(status => 406, json => { result => 0, text => "a parameter($id,$value,$hours) provided did not match character validation"} );
        return;
    }

    my $dbh = _mysql_dbh($self, $config) or return;
    my $field = $value;
    $field = "voltage,pressure,humidity,temperature" if $field eq "all";
    my $sth = $dbh->prepare("SELECT UNIX_TIMESTAMP(date) as epoch,date,id,sensor_address,$field from data where sensor_address=$id and date >= DATE_SUB(NOW(),INTERVAL $hours HOUR)");
    $sth->execute();
    my $data = $sth->fetchall_arrayref({});
    $sth->finish();
    if (!$dbh->errstr()) {
        $self->render(status => 200, json => { result => 1, payload => $data});
    } else {
        print $dbh->errstr();
        $self->render(status => 500, json => { result => 0, text => 'Database error occurred'});
    }
};

post "/sensors/:id/name" => sub {
    my $self       = shift;
    my $id         = $self->param('id');
    my $value      = $self->param('value');
    my $validator  = Mojolicious::Validator->new;
    my $validation = Mojolicious::Validator::Validation->new(validator => $validator);

    $validation->input({'id' => $id, 'value' => $value});
    $validation->required('id')->like(qr/^\d+$/);
    $validation->required('value')->like(qr/^[\s\w\d,\-\._\']+$/);;
    if(! $validation->is_valid) {
        $self->render(status => 406, json => { result => 0, text => "a parameter($id,$value) provided did not match character validation"} );
        return;
    }

    my $dbh = _mysql_dbh($self, $config) or return;
    $dbh->do("UPDATE sensor set display_name=? where sensor_address=?", undef, $value, $id);
    if($dbh->errstr()) {
        $self->render(status => 500, json => { result => 0, text => 'failed to save value to database'});
    }
    $self->render(status => 200, json => { result => 1, text => 'success' });
};

get "/config" => sub {
    my $self = shift;
    my $dbh = _mysql_dbh($self, $config) or return;
    my $sth = $dbh->prepare("SELECT name,value from configuration");
    $sth->execute();
    my $data = $sth->fetchall_hashref('name');
    $sth->finish();
    $self->render(json => { result => 1, payload => $data});
};

get "/config/:key" => sub {
    my $self = shift;
    my $key = $self->param('key');
    my $dbh = _mysql_dbh($self, $config) or return;
    my $sth = $dbh->prepare("SELECT value from configuration where name='$key'");
    $sth->execute();
    my $row = $sth->fetchrow_hashref();
    $sth->finish();
    if (exists $row->{value}) {
        $self->render(json => { result => 1, payload => $row});
    } else {
        $self->render(json => { result => 0, text => 'no config found' }, status => 404);
    }
};

post "/config/:key" => sub {
    my $self       = shift;
    my $key        = $self->param('key');
    my $value      = $self->param('value');
    my $validator  = Mojolicious::Validator->new;
    my $validation = Mojolicious::Validator::Validation->new(validator => $validator);

    $validation->input({'key' => $value});
    $validation->required('key')->like(qr/^[\s\w\d,\-\._\']+$/);
    if(! $validation->is_valid) {
        $self->render(status => 406, json => { result => 0, text => "value '$value' provided did not match character validation"} );
        return;
    }

    my $dbh = _mysql_dbh($self, $config) or return;
    my $sth = $dbh->prepare("select id from configuration where name='$key'");
    $sth->execute();
    my $row = $sth->fetchrow_hashref();
    if (exists $row->{id}) {
        $dbh->do("UPDATE configuration SET name=?, value=? WHERE id=?", undef, $key, $value, $row->{id});
        if($dbh->errstr()) {
            $self->render(status => 500, json => { result => 0, text => 'failed to save value to database'});
            return;
        }
    } else {
        $dbh->do("INSERT INTO configuration (name, value) VALUES (?, ?)", undef, $key, $value);
        if($dbh->errstr()) {
            $self->render(status => 500, json => { result => 0, text => 'failed to save value to database'});
            return;
        }
    }

    $self->render(status => 200, json => { result => 1, text => 'success' });
};


app->start;


##################
### local subs ###
##################

sub _mysql_dbh {
    my $self   = shift;
    my $config = shift;
    my $dbh    = DBI->connect("DBI:mysql:database=$config->{mysqldb}:host=$config->{mysqlserver}:port=3306",
                           $config->{mysqluser},$config->{mysqlpass})
                      or $self->render(status=>500,text=>'Failed database connection') and return 0;
    return $dbh;
}

__DATA__

@@ about.html.ep
<div class="jumbotron">
  <div class="container">
    <%= $appname %> <%= $version %>
  </div>
</div>
